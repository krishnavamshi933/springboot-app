@Library('myLibrary') _

pipeline{

    agent any
 
     tools {
         
         maven 'maven'
        }
     parameters{

        choice(name: 'action', choices: 'create\ndelete', description: 'Choose create/Destroy')
        string(name: 'aws_account_id', description: " AWS Account ID", defaultValue: '074469624262')
        string(name: 'Region', description: "Region of ECR", defaultValue: 'ap-southeast-1')
        string(name: 'ECR_REPO_NAME', description: "name of the ECR", defaultValue: 'krishnavamshi')
       // string(name: 'cluster', description: "name of the EKS Cluster", defaultValue: 'demo-eks') 
     }
    
    
    stages{
         
        stage('Git Checkout'){
            when { expression {  params.action == 'create' } }
             steps{
            gitCheckout(
                branch: "main",
                url: "git@github.com:krishnavamshi933/springboot-app.git"
            ) 
            }
        }
           
      
    stage('Unit Test maven'){

        when { expression {  params.action == 'create' } }
         
            steps{
               script{
                   
                   mvnTest()
               }
            }
        }
      
    stage('Integration Test maven'){
          
          when { expression {  params.action == 'create' } }
             steps{
               script{
                   
                   mvnIntegrationTest()
               }
            }
        }
       

     stage('Static code analysis: Sonarqube'){
          when { expression {  params.action == 'create' } }
             steps{
                script{
                   
                    def  SonarQubecredentialsId = 'sonar-api'
                    statiCodeAnalysis(SonarQubecredentialsId)
               }
             }
         }
     
     stage('Quality Gate Status Check : Sonarqube'){
          when { expression {  params.action == 'create' } }
            steps{
                script{
                   
                   def  SonarQubecredentialsId = 'sonar-api'
                   QualityGateStatus(SonarQubecredentialsId)
                }
             }
         }

    stage(' maven Build'){
         
         when { expression {  params.action == 'create' } }
       
           steps{
               script{
                   
                   mvnBuild()
               }
            }
        }
    
    stage('Docker Image Build : ECR'){
         when { expression {  params.action == 'create' } }
            steps{
               script{
                   
                   dockerBuild("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
               }
            }
        }
    
    stage('Docker Image Scan: trivy '){
         when { expression {  params.action == 'create' } }
            steps{
               script{
                   
                   dockerImageScan("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
               }
            }
        }
        stage('Docker Image Push : ECR '){
         when { expression {  params.action == 'create' } }
            steps{
               script{
                   
                   dockerImagePush("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
               }
            }
        }   
        stage('Docker Image Cleanup : ECR '){
         when { expression {  params.action == 'create' } }
            steps{
               script{
                   
                   dockerImageCleanup("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
               }
            }
        } 

        // stage('Connect to EKS '){
        //     when { expression {  params.action == 'create' } }
        // steps{

        //     script{

        //         sh """
        //         aws configure set aws_access_key_id "$ACCESS_KEY"
        //         aws configure set aws_secret_access_key "$SECRET_KEY"
        //         aws configure set region "${params.Region}"
        //         aws eks --region ${params.Region} update-kubeconfig --name ${params.cluster}
        //         """
        //     }
        // }
        // } 

         

        //  stage ("Kube Deploy") {
        //     steps {
        //          sshagent(['k8s']) {
    
        //        sh "scp -o StrictHostKeyChecking=no eks-deploy-k8s.yaml ec2-user@35.77.93.248:/home/ec2-user"
        //     script {
        //         try{
        //             sh "ssh ec2-user@35.77.93.248 kubectl apply -f ."
        //         }
        //         catch(error){
        //             sh "ssh ec2-user@35.77.93.248 kubectl create -f ." //private ip of cluster

        //          }
        //         }
        //     }
        //     }
        //  }
    }
}
    
    

